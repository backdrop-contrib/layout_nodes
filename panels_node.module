<?php
/**
 * @file panels_node.module
 *
 * This module provides the "panel" node type.
 * Panel nodes are useful to add additional content to the content area
 * on a per-node base.
 */

// ---------------------------------------------------------------------------
// General Backdrop hooks.

/**
 * layout_preprocess_layout() adds all these page components to templates 
 * whether you want them or not, meaning they show up twice: once when the page 
 * is rendered and again when this node layout is rendered, except if 'admin' 
 * is true.
 */
function panels_node_preprocess_layout(&$variables) {
  if ($variables['layout']->settings['panels_node']) {
    $variables['admin'] = TRUE;
  }
}

/**
 * Implements hook_permission().
 */
function panels_node_permission() {
  return array(
    'administer panel-nodes' => array(
      'title' => t('Administer panel nodes'),
      'description' => t('Full administrative access to panel nodes including create, update and delete all'),
    ),
    'create panel content' => array(
      'title' => t('Create panel content'),
      'description' => t('Create panel content.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function panels_node_menu() {
  $items['admin/structure/panels/settings/panel-node'] = array(
    'title' => 'Panel nodes',
    'description' => 'Configure which content is available to add to panel node displays.',
    'access arguments' => array('administer panel-nodes'),
    'page callback' => 'panels_node_settings',
    'type' => MENU_LOCAL_TASK,
  );

  // Avoid some repetition on these:
  $base = array(
    'access callback' => 'panels_node_edit_node',
    'access arguments' => array(1),
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%node/panel_layout'] = array(
    'title' => 'Panel layout',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('panels_node_edit_layout', 1),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'panels_node_edit_node',
    'access arguments' => array(1),
  );

  $items['node/%node/panel_content'] = array(
    'title' => 'Panel content',
    'page callback' => 'panels_node_edit_content',
    'weight' => 3,
  ) + $base;

  $items['node/add/panel/choose-layout'] = array(
    'title' => 'Choose layout',
    'access callback' => 'panels_add_panel_access_callback',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('panels_node_edit_layout'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access callback to determine if a user has edit access.
 */
function panels_node_edit_node($node) {
  if (!isset($node->panels_node)) {
    return FALSE;
  }

  return node_access('update', $node);
}

/**
 * Access callback to determine if user has access to add panel nodes.
 */
function panels_add_panel_access_callback() {
  return user_access('create panel content') || user_access('administer panel-nodes');
}

function panels_node_admin_paths_alter(&$paths) {
  $paths['node/*/panel_layout'] = TRUE;
  $paths['node/*/panel_content'] = TRUE;
}

// ---------------------------------------------------------------------------
// Node hooks.
/**
 * Implements hook_access().
 */
function panels_node_node_access($node, $op, $account) {
  if ($op == 'create' && $node != 'panel') {
    return NODE_ACCESS_IGNORE;
  }

  if (is_object($node) && $node->type != 'panel') {
    return NODE_ACCESS_IGNORE;
  }

  if (user_access('administer panel-nodes', $account)) {
    return NODE_ACCESS_ALLOW;
  }
}

/**
 * Implements hook_form().
 */
function panels_node_hook_form(&$node, &$form_state) {
  $form['panels_node']['#tree'] = TRUE;
  if (empty($node->nid) && arg(0) == 'node' && arg(1) == 'add') {
    // Grab our selected layout from the $node, If it doesn't exist, try arg(3)
    // and if that doesn't work present them with a list to pick from.
    $layout_template = isset($node->panel_layout) ? $node->panel_layout : arg(3);
    if (empty($layout_template)) {
      backdrop_goto('node/add/panel/choose-layout', array('query' => backdrop_get_query_parameters()));
    }

    $layout_template_info = layout_get_layout_template_info($layout_template);
    if (empty($layout_template_info)) {
      return MENU_NOT_FOUND;
    }
    $form['panels_node']['layout'] = array(
      '#type' => 'value',
      '#value' => $layout_template,
    );
  }

  $type = node_type_get_type($node);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );

  return $form;
}

/**
 * Implements hook_validate().
 */
function panels_node_hook_validate($node, $form, &$form_state) {
  if (!$node->nid && empty($node->panels_node['layout_template'])) {
    form_error($form['panels_node']['layout'], t('Please select a layout.'));
  }
}

/**
 * Implements hook_load().
 *
 * Panels does not use revisions for nodes because that would open us up
 * to have completely separate displays, and we'd have to copy them,
 * and that's going to be a LOT of data.
 */
function panels_node_hook_load($nodes) {
  // We shortcut this because only in some really drastic corruption circumstance will this
  // not work.
  $result = db_query("SELECT * FROM {panels_node} WHERE nid IN (:nids)", array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->panels_node = (array) $record;
  }
}

/**
 * Implements hook_insert().
 */
function panels_node_hook_insert(&$node) {
  db_insert('panels_node')
    ->fields(array(
    'nid' => $node->nid,
    'module' => 'panels_node', // todo remove module
    'layout_template' => $node->panels_node['layout_template'],
    'settings' => serialize(array())
  ))
    ->execute();
}

/**
 * Implements hook_delete().
 */
function panels_node_hook_delete(&$node) {
  db_delete('panels_node')->condition('nid', $node->nid)->execute();
  db_delete('panel_blocks')->condition('nid', $node->nid)->execute();
}

/**
 * Implements hook_view().
 */
function panels_node_hook_view($node, $view_mode) {
  static $rendering = array();

  // Prevent loops if someone foolishly puts the node inside itself:
  if (!empty($rendering[$node->nid])) {
    return $node;
  }

  $rendering[$node->nid] = TRUE;

  if ($view_mode == 'teaser') {
    // Because our teasier is never the same as our content, *always* provide
    // the read more flag.
    $node->readmore = TRUE;
  }
  else {
    if (!empty($node->panels_node['nid'])) {
      $display = panels_node_layout_load($node);

      // This lets us know if a template is being used by the page or the node.
      $display->settings['panels_node'] = TRUE;
      $renderer = layout_create_renderer('standard', $display);
      $node->content['body'] = array(
        '#markup' => $renderer->render(),
        '#weight' => 0,
      );
    }
  }

  unset($rendering[$node->nid]);
  return $node;
}

// ---------------------------------------------------------------------------
// Administrative pages.
/**
 * Settings for panel nodes.
 */
function panels_node_settings() {
  return array();
}

// ---------------------------------------------------------------------------
// Meat of the Panels API; almost completely passing through to panels.module.
/**
 * Pass through to the panels layout editor.
 */
function panels_node_edit_layout($form, &$form_state, $node = NULL) {
  $form['#attached']['js'][] = backdrop_get_path('module', 'layout') . '/js/layout.admin.js';
  $form['#attached']['css'][] = backdrop_get_path('module', 'layout') . '/css/layout.admin.css';

  $default_template = '';
  if ($node) {
    $layout = panels_node_layout_load($node);
    $default_template = $layout->layout_template;
    $layout->node = $node;
    $form_state['layout'] = $layout;
  }

  $form['#attributes'] = array('class' => array('layout-settings-form'));

  $form['layout_template'] = array(
    '#title' => t('Layout template'),
    '#type' => 'radios',
    '#default_value' => $default_template,
    '#options' => array(),
    '#wrapper_attributes' => array('class' => array('clearfix', 'layout-options')),
    '#required' => TRUE,
  );

  // Get the list of layout template options.
  $all_template_info = layout_get_layout_template_info();
  $excluded = config_get('layout.settings', 'excluded_templates');
  foreach ($all_template_info as $template_name => $template_info) {
    if (!in_array($template_name, $excluded)) {
      $form['layout_template']['#options'][$template_name] = theme('layout_template_option', array('template_info' => $template_info));
    }
  }
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save layout'),
    '#submit' => array(
      'panels_node_edit_layout_submit',
    ),
  );

  return $form;
}

/**
 * Pass through to the panels content editor.
 */
function panels_node_edit_layout_submit($form, &$form_state) {
  // If a layout isnt set yet, this should be a new node being added.
  if (!isset($form_state['layout'])) {
    backdrop_goto('node/add/panel/' . $form_state['values']['layout_template']);
  }
  else {
    $layout = $form_state['layout'];
    $layout->setLayoutTemplate($form_state['values']['layout_template']);
    if (!empty($layout->positions)) {
      foreach ($layout->positions as $region_id => $uuids) {
        foreach ($uuids as $block_index => $uuid) {
          if (isset($layout->content[$uuid])) {
            panels_node_save_block($layout, $region_id, $uuid, $block_index);
          }
        }
      }
    }
    db_update('panels_node')
      ->fields(array(
        'layout_template' => $form_state['values']['layout_template'],
      ))
      ->condition('nid', $layout->node->nid, '=')
      ->execute();
    backdrop_set_message(t('Layout saved.'));
  }
  layout_clear_layout_tempstore('panel-node-' . $layout->node->nid);
}

/**
 * Pass through to the panels content editor.
 */
function panels_node_edit_content($node) {
  // Load from database to tempstore as Layout pulls from tempstore to build
  // the content form and blocks etc.
  if (!$display = layout_tempstore_load('panel-node-' . $node->nid)) {
    $display = panels_node_layout_load($node);
    $display->name = 'panel-node-' . $node->nid;

    // Don't use layout_set_layout_tempstore(). It locks the layout.
    tempstore_set('layout.layout', $display->name, $display, 604800);
    $display->locked = FALSE;
  }

  $display->node = $node;

  $display->setPath('node/%');
  module_load_include('inc', 'layout', 'layout.admin');
  return backdrop_get_form('layout_content_form', $display);
}

function panels_node_form_layout_content_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#layout']->module == 'panels_node') {
    $form['actions']['submit']['#submit'] = array('panels_node_layout_content_form_submit');
    $form['actions']['cancel']['#access'] = FALSE;
  }
}

function panels_node_layout_content_form_submit(&$form, &$form_state) {
  $layout = $form_state['layout'];
  // Update the block positions based on the hidden position elements.
  if (!empty($form_state['values']['content']['positions'])) {
    foreach ($form_state['values']['content']['positions'] as $region_id => $blocks) {
      if ($blocks) {
        $uuids = array_filter(explode(',', $blocks));
        foreach ($uuids as $block_index => $uuid) {
          if (isset($layout->content[$uuid])) {
            panels_node_save_block($layout, $region_id, $uuid, $block_index);
          }
        }
      }
    }
  }

  layout_clear_layout_tempstore('panel-node-' . $layout->node->nid);
}

function panels_node_save_block($layout, $region_id, $uuid, $block_index) {
  $block = $layout->content[$uuid];

  $data = array(
    'nid' => $layout->node->nid,
    'uuid' => $uuid,
    'region_id' => $region_id,
    'block_index' => $block_index,
    'block_data' => $block,
    );
  $exists = db_query('SELECT count(uuid) FROM {panel_blocks} WHERE uuid = :uuid', array(':uuid' => $uuid))->fetchField();
  if ($exists) {
    backdrop_write_record('panel_blocks', $data, 'uuid');
  }
  else {
    backdrop_write_record('panel_blocks', $data);
  }
}

function panels_node_layout_load($node) {
  // @todo join instead of two queries?
  $result = db_query("SELECT * FROM {panels_node} WHERE nid = :nid", array(':nid' => $node->nid))->fetchObject();
  $blocks = db_query("SELECT * FROM {panel_blocks} WHERE nid = :nid", array(':nid' => $node->nid));
  $config = array();
  // Create a new display and record that.
  $layout = new Layout($config);
  $layout->title = $result->title;
  $layout->module = $result->module;
  $layout->layout_template = $result->layout_template;
  $layout->settings = unserialize($result->settings);
  $layout->locked = FALSE;
  $layout->setPath('node/%');

  // Set the node context on our stub layout.
  $contexts = $layout->getContexts();
  $contexts[1]->setData($node);

  foreach ($blocks as $data) {
    $block = unserialize($data->block_data);
    $layout->content[$data->uuid] = $block;
    $layout->positions[$data->region_id][$data->block_index] = $data->uuid;
  }

  return $layout;
}

